contract ChannelOnChainContractOracle =

  type query_t  = string
  type answer_t = string
  type oracle_id = oracle(query_t, answer_t)
  type query_id = oracle_query(query_t, answer_t)

  record state = { oracle        : oracle_id,
                   tmp           : string,
                   bets          : map(string, address)
                   }


  public function init(oracle: oracle_id) : state =
    { oracle = oracle,
      tmp    = "TMP",
      bets   = {}
      }

  private function abort() =
    switch(0) 1 => ()

  public function set_tmp(tmp: string) =
      put(state{tmp = tmp})

  public stateful function place_bet(answer: string) = 
    switch(Map.lookup(answer, state.bets))
      None         =>
        put(state{ bets = state.bets{[answer] = Call.caller}})
      Some(_value) => abort()

  public stateful function resolve(q: query_id) =
    switch(Oracle.get_answer(state.oracle, q))
      None         =>
        "no response"
      Some(result) => 
        switch(Map.lookup(result, state.bets))
          None         =>
            "no winning bet"
          Some(winner) =>
            Chain.spend(winner, Contract.balance)
            "ok"
